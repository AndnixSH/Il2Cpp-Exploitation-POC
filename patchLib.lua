-- insert a string into another one replacing chars
function replace(str1, str2, pos)
    return str1:sub(1, pos - 1) .. str2 .. str1:sub(pos + string.len(str2))
end

-- patch ARM64 method by signature
function patchMethod(hex, to)
    gg.searchNumber("h " .. hex, gg.TYPE_BYTE)
    gg.getResults(100)
    print(gg.getResultsCount())
    gg.editAll("h " .. to, gg.TYPE_BYTE)
    gg.clearResults()
end

--[[
sometimes game guardian gives byte in signed 2's complement for no 
reason and that's really annoying
]]--
function toDex(raw)
    hex = string.format("%x", raw)
    len = string.len(hex)
    return string.sub(hex, len - 1, len) -- tonumber(n, 16)
end

-- reads HEX bytes from a lib by offset
function readAddr(lib, addr, size)
    local soBase = gg.getRangesList(lib)[1]["start"]
    local targets = {}
    for i = 1, size do
        targets[#targets + 1] = {
            address = soBase + addr + #targets,
            flags = gg.TYPE_BYTE
        }
    end
    result = ""
    for _, item in ipairs(gg.getValues(targets)) do
        result = result .. " " .. toDex(item.value)
    end
    return result
end

-- patches il2cpp bytes a lib by offset
function patchAddr2(lib, addr, hex)
    local soBase = gg.getRangesList(lib)[1].start
    local patchCode = {}
    for code in string.gmatch(hex:gsub("%s+", ""), "..") do
        patchCode[#patchCode + 1] = {
            address = soBase + addr + #patchCode,
            value = tonumber(code, 16),
            flags = gg.TYPE_BYTE
        }
    end
    gg.setValues(patchCode)
end

-- patches il2cpp bytes a lib by offset
function patchAddr(lib, addr, hex)
    local soBase = gg.getRangesList(lib)[1].start
    local patchCode = {}
    for code in string.gmatch(hex, ".") do
        patchCode[#patchCode + 1] = {
            address = soBase + addr + #patchCode,
            value = string.byte(code),
            flags = gg.TYPE_BYTE
        }
    end
    gg.setValues(patchCode)
end

gg.setRanges(gg.REGION_CODE_APP | gg.REGION_C_DATA)
print(readAddr("libil2cpp.so", 0x524EA4, 8))
patchAddr2("libil2cpp.so", 0x524EA4, "00 00 A0 E3 1E FF 2F E1")
print(readAddr("libil2cpp.so", 0x524EA4, 8))
